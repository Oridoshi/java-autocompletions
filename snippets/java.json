{
	"Génère une méthode pour lire un fichier avec un BufferedReader":
	{
		"prefix": "lirefichierBufferedReader",
		"body":
		[
			"/**",
			" * Lit un fichier à partir des ressources du projet et traite chaque ligne en utilisant une méthode de traitement personnalisée.",
			" * BufferedReader est plus adapté aux fichiers texte volumineux.",
			" * ",
			" * @param nomFichier Le nom du fichier à lire depuis les ressources du projet.",
			" */",
			"private void lireFichierBufferedReader(String nomFichier)",
			"{",
			"    String ligne = null;",
			"",
			"    try",
			"    {",
			"        InputStream ips = this.getClass().getResourceAsStream(nomFichier);",
			"        InputStreamReader ipsr = new InputStreamReader(ips, \"UTF-8\");",
			"        BufferedReader fichier = new BufferedReader(ipsr);",
			"        // Traitement du fichier",
			"        while ((ligne = fichier.readLine()) != null)",
			"        {",
			"            traiteLigne(ligne);// Modifiez cette méthode pour traiter la ligne lue",
			"        }",
			"        // Fin du traitement du fichier",
			"        fichier.close();",
			"    }",
			"    catch(Exception exc)",
			"    {",
			"        System.out.println(\"Erreur de lecture du fichier \" + nomFichier + \" : \" + exc);",
			"    }",
			"}",
			"",
			"/**",
			" * Méthode destinée à traiter chaque ligne lue à partir du fichier.",
			" * Vous devriez implémenter votre code de traitement personnalisé ici.",
			" * ",
			" * @param ligne La ligne lue à partir du fichier.",
			" */",
			"private void traiteLigne(String ligne)",
			"{",
			"    /*Mettre votre code de traitement de ligne*/",
			"}"
		],
		"description": "Génère une Méthode pour lire un fichier et traiter les lignes"
	},

	"Génère une méthode pour lire un fichier avec un Scanner":
	{
		"prefix": "lirefichierScanner",
		"body":
		[
			"/**",
			" * Lit un fichier en utilisant un Scanner et traite chaque ligne en utilisant une méthode de traitement personnalisée.",
			" * Scanner est plus adapté aux fichiers texte simples et aux opérations de découpage.",
			" * ",
			" * @param nomFichier Le nom du fichier à lire.",
			" */",
			"private void lireFichier(String nomFichier)",
			"{",
			"    try",
			"    {",
			"        InputStream ips = this.getClass().getResourceAsStream(nomFichier);",
			"        Scanner scanner =new Scanner(ips, \"UTF-8\");",
			"        while (scanner.hasNextLine())",
			"        {",
			"            /*CODE DU TRAITEMENT DE LA LIGNE*/",
			"            /*Avec un scanner, vous pouvez utiliser la méthode nextInt() pour lire un entier, nextDouble() pour lire un double, etc.*/",
			"        }",
			"        scanner.close();",
			"    }",
			"    catch (Exception e)",
			"    {",
			"        System.err.println(\"Erreur de lecture du fichier \" + nomFichier + \" : \" + e.getMessage());",
			"    }",
			"}"
		],
		"description": "Génère une Méthode pour lire un fichier avec un Scanner et traiter les lignes"
	},

	"Génère une class interne pour créer un iterator":
	{
		"prefix": "iterintern",
		"body":
		[
			"public class NomIterator implements Iterator<TYPE>",
			"{",
			"    private int index = 0;",
			"    /*variable si besoin*/",
			"",
			"    public NomIterator()",
			"    {",
			"        /*initialisation des variable si besoin*/",
			"    }",
			"",
			"    @Override",
			"    public boolean hasNext()",
			"    {",
			"        return index < NbTotal; /*Si le nombre est dans la classe parent ont fait NomDeLaClassParent.this.VariableDuNbTotal*/",
			"    }",
			"",
			"    @Override",
			"    public TYPE next()",
			"    {",
			"        return ArrayQuiContientLesValeur[this.index++];/*Si le tableau est dans la classe parent ont fait NomDeLaClassParent.this.ArrayQuiContientLesValeur*/",
			"    }",
			"}"
		],
		"description": "Génère une class interne pour créer un iterator si il y en a déjà un par défault"
	},

	"Génère une class interne pour créer un comparator si il y en a déjà un par défault":
	{
		"prefix": "comparintern",
		"body":
		[
			"public static class NomComparator implements Comparator<TYPE>",
			"{",
			"    @Override",
			"    public int compare(TYPE o1, TYPE o2)",
			"    {",
			"        /*CODE DE COMPARAISON*/",
			"    }",
			"}"
		],
		"description": "Génère une class interne pour créer un comparator si il y en a déjà un par défault"
	
	},

	"Génère une méthode pour écrire dans un fichier":
	{
		"prefix": "ecrirefichier",
		"body":
		[
			"/**",
			" * Écrit des données dans un fichier spécifié en utilisant un PrintWriter.",
			" * ",
			" * @param nomFichierDestination Le nom du fichier dans lequel écrire les données.",
			" */",
			"private void ecrireFichier(String nomFichierDestination)",
			"{",
			"    try {",
			"        PrintWriter pw = new PrintWriter(new FileOutputStream(nomFichierDestination));",
			"",
			"        /* Mettez votre code d'écriture de fichier ici */",
			"        pw.println(ecritureLigne());",
			"        /* Fin de l'écriture du fichier */",
			"",
			"        pw.close();",
			"    }",
			"    catch (Exception e)",
			"    {",
			"        e.printStackTrace();",
			"    }",
			"}",
			"",
			"/**",
			" * Méthode destinée à générer la chaîne de caractères à écrire dans le fichier.",
			" * Vous devriez implémenter votre code de génération de ligne personnalisée ici.",
			" * ",
			" * @return La chaîne de caractères à écrire dans le fichier.",
			" */",
			"private String ecritureLigne()",
			"{",
			"    /* Mettez votre code de génération de ligne ici */",
			"    String str = \"\";",
			"    return str;",
			"}"
		],
		"description": "Génère une Méthode pour écrire dans un fichier"
	}
}